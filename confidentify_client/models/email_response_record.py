# coding: utf-8

"""
    Confidentify API

    Services that let you build confidence and identify matches in customer data. ## Features overview * Contact data processing services (tagged with `process`) which offer   validation and enrichment backed by inference and knowledge on complex   data types such as names, email addresses, phone numbers.  * Data matching and searching services (tagged with `matching`) that    allow you to identify duplicated data or matches against third party   contact data list.  * Dataset management services (tagged with `dataset`) that allow record storage and retrieval. ## Integrator notes: * Use the `/auth` endpoint to get an access token. Access tokens are temporary, so design the client the be capable of renewing it. * The APIs are rate-limited, so design the client to be capable of retrying with some delay upon HTTP 429 responses.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from confidentify_client.configuration import Configuration


class EmailResponseRecord(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'email_formatted': 'str',
        'email_simplified': 'str',
        'username': 'str',
        'label': 'str',
        'subdomain': 'str',
        'domain': 'str',
        'tld': 'str',
        'email_suggested': 'str',
        'outcome': 'ProcessorOutcome'
    }

    attribute_map = {
        'id': 'id',
        'email_formatted': 'email_formatted',
        'email_simplified': 'email_simplified',
        'username': 'username',
        'label': 'label',
        'subdomain': 'subdomain',
        'domain': 'domain',
        'tld': 'tld',
        'email_suggested': 'email_suggested',
        'outcome': 'outcome'
    }

    def __init__(self, id=None, email_formatted=None, email_simplified=None, username=None, label=None, subdomain=None, domain=None, tld=None, email_suggested=None, outcome=None, local_vars_configuration=None):  # noqa: E501
        """EmailResponseRecord - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._email_formatted = None
        self._email_simplified = None
        self._username = None
        self._label = None
        self._subdomain = None
        self._domain = None
        self._tld = None
        self._email_suggested = None
        self._outcome = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if email_formatted is not None:
            self.email_formatted = email_formatted
        if email_simplified is not None:
            self.email_simplified = email_simplified
        if username is not None:
            self.username = username
        if label is not None:
            self.label = label
        if subdomain is not None:
            self.subdomain = subdomain
        if domain is not None:
            self.domain = domain
        if tld is not None:
            self.tld = tld
        if email_suggested is not None:
            self.email_suggested = email_suggested
        if outcome is not None:
            self.outcome = outcome

    @property
    def id(self):
        """Gets the id of this EmailResponseRecord.  # noqa: E501


        :return: The id of this EmailResponseRecord.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmailResponseRecord.


        :param id: The id of this EmailResponseRecord.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def email_formatted(self):
        """Gets the email_formatted of this EmailResponseRecord.  # noqa: E501


        :return: The email_formatted of this EmailResponseRecord.  # noqa: E501
        :rtype: str
        """
        return self._email_formatted

    @email_formatted.setter
    def email_formatted(self, email_formatted):
        """Sets the email_formatted of this EmailResponseRecord.


        :param email_formatted: The email_formatted of this EmailResponseRecord.  # noqa: E501
        :type: str
        """

        self._email_formatted = email_formatted

    @property
    def email_simplified(self):
        """Gets the email_simplified of this EmailResponseRecord.  # noqa: E501

        Simplified variant of the email address. This format strips out characters or parts of the email that may be technically  irrelevant depending on the email domain's addressing rules.  We do not recommend using the simplified email address for sending, but it may be beneficial for certain cases such as identifying duplicates.   # noqa: E501

        :return: The email_simplified of this EmailResponseRecord.  # noqa: E501
        :rtype: str
        """
        return self._email_simplified

    @email_simplified.setter
    def email_simplified(self, email_simplified):
        """Sets the email_simplified of this EmailResponseRecord.

        Simplified variant of the email address. This format strips out characters or parts of the email that may be technically  irrelevant depending on the email domain's addressing rules.  We do not recommend using the simplified email address for sending, but it may be beneficial for certain cases such as identifying duplicates.   # noqa: E501

        :param email_simplified: The email_simplified of this EmailResponseRecord.  # noqa: E501
        :type: str
        """

        self._email_simplified = email_simplified

    @property
    def username(self):
        """Gets the username of this EmailResponseRecord.  # noqa: E501


        :return: The username of this EmailResponseRecord.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this EmailResponseRecord.


        :param username: The username of this EmailResponseRecord.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def label(self):
        """Gets the label of this EmailResponseRecord.  # noqa: E501


        :return: The label of this EmailResponseRecord.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this EmailResponseRecord.


        :param label: The label of this EmailResponseRecord.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def subdomain(self):
        """Gets the subdomain of this EmailResponseRecord.  # noqa: E501


        :return: The subdomain of this EmailResponseRecord.  # noqa: E501
        :rtype: str
        """
        return self._subdomain

    @subdomain.setter
    def subdomain(self, subdomain):
        """Sets the subdomain of this EmailResponseRecord.


        :param subdomain: The subdomain of this EmailResponseRecord.  # noqa: E501
        :type: str
        """

        self._subdomain = subdomain

    @property
    def domain(self):
        """Gets the domain of this EmailResponseRecord.  # noqa: E501


        :return: The domain of this EmailResponseRecord.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this EmailResponseRecord.


        :param domain: The domain of this EmailResponseRecord.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def tld(self):
        """Gets the tld of this EmailResponseRecord.  # noqa: E501


        :return: The tld of this EmailResponseRecord.  # noqa: E501
        :rtype: str
        """
        return self._tld

    @tld.setter
    def tld(self, tld):
        """Sets the tld of this EmailResponseRecord.


        :param tld: The tld of this EmailResponseRecord.  # noqa: E501
        :type: str
        """

        self._tld = tld

    @property
    def email_suggested(self):
        """Gets the email_suggested of this EmailResponseRecord.  # noqa: E501

        When available, a suggested corrected email address.   # noqa: E501

        :return: The email_suggested of this EmailResponseRecord.  # noqa: E501
        :rtype: str
        """
        return self._email_suggested

    @email_suggested.setter
    def email_suggested(self, email_suggested):
        """Sets the email_suggested of this EmailResponseRecord.

        When available, a suggested corrected email address.   # noqa: E501

        :param email_suggested: The email_suggested of this EmailResponseRecord.  # noqa: E501
        :type: str
        """

        self._email_suggested = email_suggested

    @property
    def outcome(self):
        """Gets the outcome of this EmailResponseRecord.  # noqa: E501


        :return: The outcome of this EmailResponseRecord.  # noqa: E501
        :rtype: ProcessorOutcome
        """
        return self._outcome

    @outcome.setter
    def outcome(self, outcome):
        """Sets the outcome of this EmailResponseRecord.


        :param outcome: The outcome of this EmailResponseRecord.  # noqa: E501
        :type: ProcessorOutcome
        """

        self._outcome = outcome

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailResponseRecord):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmailResponseRecord):
            return True

        return self.to_dict() != other.to_dict()
