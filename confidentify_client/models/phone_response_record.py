# coding: utf-8

"""
    Confidentify API

    Services that let you build confidence and identify matches in customer data. ## Features overview * Contact data processing services (tagged with `process`) which offer   validation and enrichment backed by inference and knowledge on complex   data types such as names, email addresses, phone numbers.  * Data matching and searching services (tagged with `matching`) that    allow you to identify duplicated data or matches against third party   contact data list.  * Dataset management services (tagged with `dataset`) that allow record storage and retrieval. ## Integrator notes: * Use the `/auth` endpoint to get an access token. Access tokens are temporary, so design the client the be capable of renewing it. * The APIs are rate-limited, so design the client to be capable of retrying with some delay upon HTTP 429 responses.   # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from confidentify_client.configuration import Configuration


class PhoneResponseRecord(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'phone_e164': 'str',
        'phone_international': 'str',
        'phone_country_code': 'int',
        'phone_national': 'str',
        'outcome': 'PhoneResponseRecordProcessorOutcome'
    }

    attribute_map = {
        'id': 'id',
        'phone_e164': 'phone_E164',
        'phone_international': 'phone_international',
        'phone_country_code': 'phone_country_code',
        'phone_national': 'phone_national',
        'outcome': 'outcome'
    }

    def __init__(self, id=None, phone_e164=None, phone_international=None, phone_country_code=None, phone_national=None, outcome=None, local_vars_configuration=None):  # noqa: E501
        """PhoneResponseRecord - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._phone_e164 = None
        self._phone_international = None
        self._phone_country_code = None
        self._phone_national = None
        self._outcome = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if phone_e164 is not None:
            self.phone_e164 = phone_e164
        if phone_international is not None:
            self.phone_international = phone_international
        if phone_country_code is not None:
            self.phone_country_code = phone_country_code
        if phone_national is not None:
            self.phone_national = phone_national
        if outcome is not None:
            self.outcome = outcome

    @property
    def id(self):
        """Gets the id of this PhoneResponseRecord.  # noqa: E501


        :return: The id of this PhoneResponseRecord.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PhoneResponseRecord.


        :param id: The id of this PhoneResponseRecord.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def phone_e164(self):
        """Gets the phone_e164 of this PhoneResponseRecord.  # noqa: E501


        :return: The phone_e164 of this PhoneResponseRecord.  # noqa: E501
        :rtype: str
        """
        return self._phone_e164

    @phone_e164.setter
    def phone_e164(self, phone_e164):
        """Sets the phone_e164 of this PhoneResponseRecord.


        :param phone_e164: The phone_e164 of this PhoneResponseRecord.  # noqa: E501
        :type: str
        """

        self._phone_e164 = phone_e164

    @property
    def phone_international(self):
        """Gets the phone_international of this PhoneResponseRecord.  # noqa: E501


        :return: The phone_international of this PhoneResponseRecord.  # noqa: E501
        :rtype: str
        """
        return self._phone_international

    @phone_international.setter
    def phone_international(self, phone_international):
        """Sets the phone_international of this PhoneResponseRecord.


        :param phone_international: The phone_international of this PhoneResponseRecord.  # noqa: E501
        :type: str
        """

        self._phone_international = phone_international

    @property
    def phone_country_code(self):
        """Gets the phone_country_code of this PhoneResponseRecord.  # noqa: E501


        :return: The phone_country_code of this PhoneResponseRecord.  # noqa: E501
        :rtype: int
        """
        return self._phone_country_code

    @phone_country_code.setter
    def phone_country_code(self, phone_country_code):
        """Sets the phone_country_code of this PhoneResponseRecord.


        :param phone_country_code: The phone_country_code of this PhoneResponseRecord.  # noqa: E501
        :type: int
        """

        self._phone_country_code = phone_country_code

    @property
    def phone_national(self):
        """Gets the phone_national of this PhoneResponseRecord.  # noqa: E501


        :return: The phone_national of this PhoneResponseRecord.  # noqa: E501
        :rtype: str
        """
        return self._phone_national

    @phone_national.setter
    def phone_national(self, phone_national):
        """Sets the phone_national of this PhoneResponseRecord.


        :param phone_national: The phone_national of this PhoneResponseRecord.  # noqa: E501
        :type: str
        """

        self._phone_national = phone_national

    @property
    def outcome(self):
        """Gets the outcome of this PhoneResponseRecord.  # noqa: E501


        :return: The outcome of this PhoneResponseRecord.  # noqa: E501
        :rtype: PhoneResponseRecordProcessorOutcome
        """
        return self._outcome

    @outcome.setter
    def outcome(self, outcome):
        """Sets the outcome of this PhoneResponseRecord.


        :param outcome: The outcome of this PhoneResponseRecord.  # noqa: E501
        :type: PhoneResponseRecordProcessorOutcome
        """

        self._outcome = outcome

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhoneResponseRecord):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PhoneResponseRecord):
            return True

        return self.to_dict() != other.to_dict()
