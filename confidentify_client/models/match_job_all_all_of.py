# coding: utf-8

"""
    Confidentify API

    Services that let you build confidence and identify matches in customer data. ## Features overview * Contact data processing services (tagged with `process`) which offer   validation and enrichment backed by inference and knowledge on complex   data types such as names, email addresses, phone numbers.  * Data matching and searching services (tagged with `matching`) that    allow you to identify duplicated data or matches against third party   contact data list.  * Dataset management services (tagged with `dataset`) that allow record storage and retrieval. ## Integrator notes: * Use the `/auth` endpoint to get an access token. Access tokens are temporary, so design the client the be capable of renewing it. * The APIs are rate-limited, so design the client to be capable of retrying with some delay upon HTTP 429 responses.   # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from confidentify_client.configuration import Configuration


class MatchJobAllAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_by': 'str',
        'started_at': 'datetime',
        'finished_at': 'datetime',
        'phase': 'str',
        'progress': 'MatchJobProgress'
    }

    attribute_map = {
        'created_by': 'created_by',
        'started_at': 'started_at',
        'finished_at': 'finished_at',
        'phase': 'phase',
        'progress': 'progress'
    }

    def __init__(self, created_by=None, started_at=None, finished_at=None, phase=None, progress=None, local_vars_configuration=None):  # noqa: E501
        """MatchJobAllAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._created_by = None
        self._started_at = None
        self._finished_at = None
        self._phase = None
        self._progress = None
        self.discriminator = None

        if created_by is not None:
            self.created_by = created_by
        if started_at is not None:
            self.started_at = started_at
        if finished_at is not None:
            self.finished_at = finished_at
        if phase is not None:
            self.phase = phase
        if progress is not None:
            self.progress = progress

    @property
    def created_by(self):
        """Gets the created_by of this MatchJobAllAllOf.  # noqa: E501

        The username of the user who created the job  # noqa: E501

        :return: The created_by of this MatchJobAllAllOf.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this MatchJobAllAllOf.

        The username of the user who created the job  # noqa: E501

        :param created_by: The created_by of this MatchJobAllAllOf.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def started_at(self):
        """Gets the started_at of this MatchJobAllAllOf.  # noqa: E501

        The date and time of job starting.  # noqa: E501

        :return: The started_at of this MatchJobAllAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this MatchJobAllAllOf.

        The date and time of job starting.  # noqa: E501

        :param started_at: The started_at of this MatchJobAllAllOf.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def finished_at(self):
        """Gets the finished_at of this MatchJobAllAllOf.  # noqa: E501

        The date and time of job finishing.  # noqa: E501

        :return: The finished_at of this MatchJobAllAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this MatchJobAllAllOf.

        The date and time of job finishing.  # noqa: E501

        :param finished_at: The finished_at of this MatchJobAllAllOf.  # noqa: E501
        :type: datetime
        """

        self._finished_at = finished_at

    @property
    def phase(self):
        """Gets the phase of this MatchJobAllAllOf.  # noqa: E501

        A description of the latest known job state.  # noqa: E501

        :return: The phase of this MatchJobAllAllOf.  # noqa: E501
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this MatchJobAllAllOf.

        A description of the latest known job state.  # noqa: E501

        :param phase: The phase of this MatchJobAllAllOf.  # noqa: E501
        :type: str
        """

        self._phase = phase

    @property
    def progress(self):
        """Gets the progress of this MatchJobAllAllOf.  # noqa: E501


        :return: The progress of this MatchJobAllAllOf.  # noqa: E501
        :rtype: MatchJobProgress
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this MatchJobAllAllOf.


        :param progress: The progress of this MatchJobAllAllOf.  # noqa: E501
        :type: MatchJobProgress
        """

        self._progress = progress

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MatchJobAllAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MatchJobAllAllOf):
            return True

        return self.to_dict() != other.to_dict()
