# coding: utf-8

"""
    Confidentify API

    Services that let you build confidence and identify matches in customer data. ## Features overview * Contact data processing services (tagged with `process`) which offer   validation and enrichment backed by inference and knowledge on complex   data types such as names, email addresses, phone numbers.  * Data matching and searching services (tagged with `matching`) that    allow you to identify duplicated data or matches against third party   contact data list.  * Dataset management services (tagged with `dataset`) that allow record storage and retrieval. ## Integrator notes: * Use the `/auth` endpoint to get an access token. Access tokens are temporary, so design the client the be capable of renewing it. * The APIs are rate-limited, so design the client to be capable of retrying with some delay upon HTTP 429 responses.   # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from confidentify_client.configuration import Configuration


class MatchJobProgress(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'records_indexed': 'int',
        'index_collisions_identified': 'int',
        'index_collisions_processed': 'int',
        'pairs_identified': 'int',
        'pairs_processed': 'int'
    }

    attribute_map = {
        'records_indexed': 'records_indexed',
        'index_collisions_identified': 'index_collisions_identified',
        'index_collisions_processed': 'index_collisions_processed',
        'pairs_identified': 'pairs_identified',
        'pairs_processed': 'pairs_processed'
    }

    def __init__(self, records_indexed=None, index_collisions_identified=None, index_collisions_processed=None, pairs_identified=None, pairs_processed=None, local_vars_configuration=None):  # noqa: E501
        """MatchJobProgress - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._records_indexed = None
        self._index_collisions_identified = None
        self._index_collisions_processed = None
        self._pairs_identified = None
        self._pairs_processed = None
        self.discriminator = None

        if records_indexed is not None:
            self.records_indexed = records_indexed
        if index_collisions_identified is not None:
            self.index_collisions_identified = index_collisions_identified
        if index_collisions_processed is not None:
            self.index_collisions_processed = index_collisions_processed
        if pairs_identified is not None:
            self.pairs_identified = pairs_identified
        if pairs_processed is not None:
            self.pairs_processed = pairs_processed

    @property
    def records_indexed(self):
        """Gets the records_indexed of this MatchJobProgress.  # noqa: E501

        The number of records in the dataset being processed.  # noqa: E501

        :return: The records_indexed of this MatchJobProgress.  # noqa: E501
        :rtype: int
        """
        return self._records_indexed

    @records_indexed.setter
    def records_indexed(self, records_indexed):
        """Sets the records_indexed of this MatchJobProgress.

        The number of records in the dataset being processed.  # noqa: E501

        :param records_indexed: The records_indexed of this MatchJobProgress.  # noqa: E501
        :type: int
        """

        self._records_indexed = records_indexed

    @property
    def index_collisions_identified(self):
        """Gets the index_collisions_identified of this MatchJobProgress.  # noqa: E501

        The amount of 'index collisions' identified in the dataset. This indicates how many overlapping values have been found when initially scanning the dataset's indexed values. Not all index collisions carry the same weight when it comes to determining the overall match, but it can provide an early indication of the size of the deduplication job.   # noqa: E501

        :return: The index_collisions_identified of this MatchJobProgress.  # noqa: E501
        :rtype: int
        """
        return self._index_collisions_identified

    @index_collisions_identified.setter
    def index_collisions_identified(self, index_collisions_identified):
        """Sets the index_collisions_identified of this MatchJobProgress.

        The amount of 'index collisions' identified in the dataset. This indicates how many overlapping values have been found when initially scanning the dataset's indexed values. Not all index collisions carry the same weight when it comes to determining the overall match, but it can provide an early indication of the size of the deduplication job.   # noqa: E501

        :param index_collisions_identified: The index_collisions_identified of this MatchJobProgress.  # noqa: E501
        :type: int
        """

        self._index_collisions_identified = index_collisions_identified

    @property
    def index_collisions_processed(self):
        """Gets the index_collisions_processed of this MatchJobProgress.  # noqa: E501

        Provides the amount of index collisions that have been processed thus far.   # noqa: E501

        :return: The index_collisions_processed of this MatchJobProgress.  # noqa: E501
        :rtype: int
        """
        return self._index_collisions_processed

    @index_collisions_processed.setter
    def index_collisions_processed(self, index_collisions_processed):
        """Sets the index_collisions_processed of this MatchJobProgress.

        Provides the amount of index collisions that have been processed thus far.   # noqa: E501

        :param index_collisions_processed: The index_collisions_processed of this MatchJobProgress.  # noqa: E501
        :type: int
        """

        self._index_collisions_processed = index_collisions_processed

    @property
    def pairs_identified(self):
        """Gets the pairs_identified of this MatchJobProgress.  # noqa: E501

        The amount of record pairs that have been identified as candidates for matching. Record pairs are selected based on index collisions.   # noqa: E501

        :return: The pairs_identified of this MatchJobProgress.  # noqa: E501
        :rtype: int
        """
        return self._pairs_identified

    @pairs_identified.setter
    def pairs_identified(self, pairs_identified):
        """Sets the pairs_identified of this MatchJobProgress.

        The amount of record pairs that have been identified as candidates for matching. Record pairs are selected based on index collisions.   # noqa: E501

        :param pairs_identified: The pairs_identified of this MatchJobProgress.  # noqa: E501
        :type: int
        """

        self._pairs_identified = pairs_identified

    @property
    def pairs_processed(self):
        """Gets the pairs_processed of this MatchJobProgress.  # noqa: E501

        The amount of record pairs that have been processed / matched. The outcome of this will be that the `result` fields `pairs_matched` or `pairs_questionable` will be incremented, or the pair will be deemed not a match and therefore not saved as a result.   # noqa: E501

        :return: The pairs_processed of this MatchJobProgress.  # noqa: E501
        :rtype: int
        """
        return self._pairs_processed

    @pairs_processed.setter
    def pairs_processed(self, pairs_processed):
        """Sets the pairs_processed of this MatchJobProgress.

        The amount of record pairs that have been processed / matched. The outcome of this will be that the `result` fields `pairs_matched` or `pairs_questionable` will be incremented, or the pair will be deemed not a match and therefore not saved as a result.   # noqa: E501

        :param pairs_processed: The pairs_processed of this MatchJobProgress.  # noqa: E501
        :type: int
        """

        self._pairs_processed = pairs_processed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MatchJobProgress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MatchJobProgress):
            return True

        return self.to_dict() != other.to_dict()
