# coding: utf-8

"""
    Confidentify API

    Services that let you build confidence and identify matches in customer data. ## Features overview * Contact data processing services (tagged with `process`) which offer   validation and enrichment backed by inference and knowledge on complex   data types such as names, email addresses, phone numbers.  * Data matching and searching services (tagged with `matching`) that    allow you to identify duplicated data or matches against third party   contact data list.  * Dataset management services (tagged with `dataset`) that allow record storage and retrieval. ## Integrator notes: * Use the `/auth` endpoint to get an access token. Access tokens are temporary, so design the client the be capable of renewing it. * The APIs are rate-limited, so design the client to be capable of retrying with some delay upon HTTP 429 responses.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from confidentify_client.configuration import Configuration


class ConfidentifyUser(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'username': 'str',
        'account_id': 'str',
        'login_count': 'float',
        'login_at': 'datetime'
    }

    attribute_map = {
        'username': 'username',
        'account_id': 'account_id',
        'login_count': 'login_count',
        'login_at': 'login_at'
    }

    def __init__(self, username=None, account_id=None, login_count=None, login_at=None, local_vars_configuration=None):  # noqa: E501
        """ConfidentifyUser - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._username = None
        self._account_id = None
        self._login_count = None
        self._login_at = None
        self.discriminator = None

        if username is not None:
            self.username = username
        if account_id is not None:
            self.account_id = account_id
        if login_count is not None:
            self.login_count = login_count
        if login_at is not None:
            self.login_at = login_at

    @property
    def username(self):
        """Gets the username of this ConfidentifyUser.  # noqa: E501


        :return: The username of this ConfidentifyUser.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ConfidentifyUser.


        :param username: The username of this ConfidentifyUser.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def account_id(self):
        """Gets the account_id of this ConfidentifyUser.  # noqa: E501


        :return: The account_id of this ConfidentifyUser.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ConfidentifyUser.


        :param account_id: The account_id of this ConfidentifyUser.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def login_count(self):
        """Gets the login_count of this ConfidentifyUser.  # noqa: E501

        A running approximate count of how many times the user has logged in.  # noqa: E501

        :return: The login_count of this ConfidentifyUser.  # noqa: E501
        :rtype: float
        """
        return self._login_count

    @login_count.setter
    def login_count(self, login_count):
        """Sets the login_count of this ConfidentifyUser.

        A running approximate count of how many times the user has logged in.  # noqa: E501

        :param login_count: The login_count of this ConfidentifyUser.  # noqa: E501
        :type: float
        """

        self._login_count = login_count

    @property
    def login_at(self):
        """Gets the login_at of this ConfidentifyUser.  # noqa: E501

        The time of the user's last login  # noqa: E501

        :return: The login_at of this ConfidentifyUser.  # noqa: E501
        :rtype: datetime
        """
        return self._login_at

    @login_at.setter
    def login_at(self, login_at):
        """Sets the login_at of this ConfidentifyUser.

        The time of the user's last login  # noqa: E501

        :param login_at: The login_at of this ConfidentifyUser.  # noqa: E501
        :type: datetime
        """

        self._login_at = login_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfidentifyUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConfidentifyUser):
            return True

        return self.to_dict() != other.to_dict()
