# coding: utf-8

"""
    Confidentify API

    Services that let you build confidence and identify matches in customer data. ## Features overview * Contact data processing services (tagged with `process`) which offer   validation and enrichment backed by inference and knowledge on complex   data types such as names, email addresses, phone numbers.  * Data matching and searching services (tagged with `matching`) that    allow you to identify duplicated data or matches against third party   contact data list.  * Dataset management services (tagged with `dataset`) that allow record storage and retrieval. ## Integrator notes: * Use the `/auth` endpoint to get an access token. Access tokens are temporary, so design the client the be capable of renewing it. * The APIs are rate-limited, so design the client to be capable of retrying with some delay upon HTTP 429 responses.   # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from confidentify_client.configuration import Configuration


class DatasetRecordAll(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'entity': 'object',
        'record_source': 'str',
        'created_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'entity': 'entity',
        'record_source': 'record_source',
        'created_at': 'created_at'
    }

    def __init__(self, id=None, entity=None, record_source=None, created_at=None, local_vars_configuration=None):  # noqa: E501
        """DatasetRecordAll - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._entity = None
        self._record_source = None
        self._created_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if entity is not None:
            self.entity = entity
        if record_source is not None:
            self.record_source = record_source
        if created_at is not None:
            self.created_at = created_at

    @property
    def id(self):
        """Gets the id of this DatasetRecordAll.  # noqa: E501

        A unique ID for the record   # noqa: E501

        :return: The id of this DatasetRecordAll.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DatasetRecordAll.

        A unique ID for the record   # noqa: E501

        :param id: The id of this DatasetRecordAll.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def entity(self):
        """Gets the entity of this DatasetRecordAll.  # noqa: E501

        The record's data   # noqa: E501

        :return: The entity of this DatasetRecordAll.  # noqa: E501
        :rtype: object
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this DatasetRecordAll.

        The record's data   # noqa: E501

        :param entity: The entity of this DatasetRecordAll.  # noqa: E501
        :type: object
        """

        self._entity = entity

    @property
    def record_source(self):
        """Gets the record_source of this DatasetRecordAll.  # noqa: E501

        A string which identifies the source of the record.   # noqa: E501

        :return: The record_source of this DatasetRecordAll.  # noqa: E501
        :rtype: str
        """
        return self._record_source

    @record_source.setter
    def record_source(self, record_source):
        """Sets the record_source of this DatasetRecordAll.

        A string which identifies the source of the record.   # noqa: E501

        :param record_source: The record_source of this DatasetRecordAll.  # noqa: E501
        :type: str
        """

        self._record_source = record_source

    @property
    def created_at(self):
        """Gets the created_at of this DatasetRecordAll.  # noqa: E501

        The time of creation of the record  # noqa: E501

        :return: The created_at of this DatasetRecordAll.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DatasetRecordAll.

        The time of creation of the record  # noqa: E501

        :param created_at: The created_at of this DatasetRecordAll.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatasetRecordAll):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DatasetRecordAll):
            return True

        return self.to_dict() != other.to_dict()
