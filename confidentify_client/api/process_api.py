# coding: utf-8

"""
    Confidentify API

    Services that let you build confidence and identify matches in customer data. ## Features overview * Contact data processing services (tagged with `process`) which offer   validation and enrichment backed by inference and knowledge on complex   data types such as names, email addresses, phone numbers.  * Data matching and searching services (tagged with `matching`) that    allow you to identify duplicated data or matches against third party   contact data list.  * Dataset management services (tagged with `dataset`) that allow record storage and retrieval. ## Integrator notes: * Use the `/auth` endpoint to get an access token. Access tokens are temporary, so design the client the be capable of renewing it. * The APIs are rate-limited, so design the client to be capable of retrying with some delay upon HTTP 429 responses.   # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from confidentify_client.api_client import ApiClient
from confidentify_client.exceptions import (
    ApiTypeError,
    ApiValueError
)


class ProcessApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def email_post(self, email_request, **kwargs):  # noqa: E501
        """Process email addresses  # noqa: E501

        Processes email addresses. Use the service to increase deliverability. Features of the service include: * Validates syntax and parses emails into discrete parts. * Corrects common misspellings and obfuscations made to make email addresses non-discoverable online. * Identifies disposable email addresses. * Identifies generic/non-personal email addresses.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.email_post(email_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param EmailRequest email_request: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EmailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.email_post_with_http_info(email_request, **kwargs)  # noqa: E501

    def email_post_with_http_info(self, email_request, **kwargs):  # noqa: E501
        """Process email addresses  # noqa: E501

        Processes email addresses. Use the service to increase deliverability. Features of the service include: * Validates syntax and parses emails into discrete parts. * Corrects common misspellings and obfuscations made to make email addresses non-discoverable online. * Identifies disposable email addresses. * Identifies generic/non-personal email addresses.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.email_post_with_http_info(email_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param EmailRequest email_request: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EmailResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['email_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method email_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'email_request' is set
        if self.api_client.client_side_validation and ('email_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['email_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `email_request` when calling `email_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'email_request' in local_var_params:
            body_params = local_var_params['email_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'oAuth2ClientCredentials']  # noqa: E501

        return self.api_client.call_api(
            '/email', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmailResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def identify_post(self, identify_request, **kwargs):  # noqa: E501
        """Process text to identify contact data.  # noqa: E501

        Analyzes unstructured text in order to identify contact data embedded within signatures, sentences, greetings. Features of the service include: * Resolve person names. * Resolve organization names.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.identify_post(identify_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param IdentifyRequest identify_request: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: IdentifyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.identify_post_with_http_info(identify_request, **kwargs)  # noqa: E501

    def identify_post_with_http_info(self, identify_request, **kwargs):  # noqa: E501
        """Process text to identify contact data.  # noqa: E501

        Analyzes unstructured text in order to identify contact data embedded within signatures, sentences, greetings. Features of the service include: * Resolve person names. * Resolve organization names.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.identify_post_with_http_info(identify_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param IdentifyRequest identify_request: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(IdentifyResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['identify_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method identify_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'identify_request' is set
        if self.api_client.client_side_validation and ('identify_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['identify_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `identify_request` when calling `identify_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'identify_request' in local_var_params:
            body_params = local_var_params['identify_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'oAuth2ClientCredentials']  # noqa: E501

        return self.api_client.call_api(
            '/identify', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IdentifyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organization_name_post(self, organization_name_request, **kwargs):  # noqa: E501
        """Process organization names  # noqa: E501

        Processes organization names and provides understanding and correction to how the entity is addressed. Features of the service include: * Identification of company legal types such as 'Corp', 'Ltd' and 'GmbH'   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_name_post(organization_name_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param OrganizationNameRequest organization_name_request: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: OrganizationNameResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.organization_name_post_with_http_info(organization_name_request, **kwargs)  # noqa: E501

    def organization_name_post_with_http_info(self, organization_name_request, **kwargs):  # noqa: E501
        """Process organization names  # noqa: E501

        Processes organization names and provides understanding and correction to how the entity is addressed. Features of the service include: * Identification of company legal types such as 'Corp', 'Ltd' and 'GmbH'   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_name_post_with_http_info(organization_name_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param OrganizationNameRequest organization_name_request: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(OrganizationNameResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['organization_name_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organization_name_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'organization_name_request' is set
        if self.api_client.client_side_validation and ('organization_name_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['organization_name_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `organization_name_request` when calling `organization_name_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'organization_name_request' in local_var_params:
            body_params = local_var_params['organization_name_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'oAuth2ClientCredentials']  # noqa: E501

        return self.api_client.call_api(
            '/organization_name', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganizationNameResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def person_name_post(self, person_name_request, **kwargs):  # noqa: E501
        """Process person names  # noqa: E501

        Processes person names and provides understanding and correction to how people are addressed. Features of the service include: * Parsing into discrete name parts like given name, middle name, family name etc. * Removal of non-name elements like salutations or titles. * Capitalization of name parts. * Identification and suggestion of possible nicknames.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.person_name_post(person_name_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param PersonNameRequest person_name_request: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PersonNameResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.person_name_post_with_http_info(person_name_request, **kwargs)  # noqa: E501

    def person_name_post_with_http_info(self, person_name_request, **kwargs):  # noqa: E501
        """Process person names  # noqa: E501

        Processes person names and provides understanding and correction to how people are addressed. Features of the service include: * Parsing into discrete name parts like given name, middle name, family name etc. * Removal of non-name elements like salutations or titles. * Capitalization of name parts. * Identification and suggestion of possible nicknames.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.person_name_post_with_http_info(person_name_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param PersonNameRequest person_name_request: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PersonNameResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['person_name_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method person_name_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'person_name_request' is set
        if self.api_client.client_side_validation and ('person_name_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['person_name_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `person_name_request` when calling `person_name_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'person_name_request' in local_var_params:
            body_params = local_var_params['person_name_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'oAuth2ClientCredentials']  # noqa: E501

        return self.api_client.call_api(
            '/person_name', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PersonNameResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def phone_post(self, phone_request, **kwargs):  # noqa: E501
        """Process phone numbers  # noqa: E501

        Processes phone number. Use the service to increase callability. Features of the service include: * Validates syntax and provides uniform formatting of phone numbers to increase understandability. * Parses phone numbers internationally, with support for vanity numbers, extension numbers and more. * Uses phone number ranges from International Telecommunications Union (ITU) to validate whether a phone number is possible or not.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.phone_post(phone_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param PhoneRequest phone_request: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PhoneResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.phone_post_with_http_info(phone_request, **kwargs)  # noqa: E501

    def phone_post_with_http_info(self, phone_request, **kwargs):  # noqa: E501
        """Process phone numbers  # noqa: E501

        Processes phone number. Use the service to increase callability. Features of the service include: * Validates syntax and provides uniform formatting of phone numbers to increase understandability. * Parses phone numbers internationally, with support for vanity numbers, extension numbers and more. * Uses phone number ranges from International Telecommunications Union (ITU) to validate whether a phone number is possible or not.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.phone_post_with_http_info(phone_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param PhoneRequest phone_request: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PhoneResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['phone_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method phone_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'phone_request' is set
        if self.api_client.client_side_validation and ('phone_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['phone_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `phone_request` when calling `phone_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'phone_request' in local_var_params:
            body_params = local_var_params['phone_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth', 'oAuth2ClientCredentials']  # noqa: E501

        return self.api_client.call_api(
            '/phone', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PhoneResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
